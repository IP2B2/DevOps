services:
  # The app itself (prod only, soon testing)
  # Partial support for nginx 
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
      - "3101:3101" # for testing
    volumes:
      - ./nginx:/etc/nginx:ro
      - ./nginx/certs:/ssl:ro
      - ${PWD_PATH}:/auth:ro
    depends_on:
      - frontend
      - backend
      - grafana
      - backend-testing
      - frontend-testing
    networks:
      - production-network
      - testing-network
      - monitoring-network
  
  backend:
    image: ${DOCKER_USER_PROD}/backend:latest
    container_name: backend
    ports:
      - "8080:8080"
    networks: 
      - production-network
      - testing-network
    depends_on:
      - database
    env_file:
      - .env.production

  backend-testing:
    image: ${DOCKER_USER_TEST}/backend-testing:latest
    container_name: backend-testing
    ports:
      - "8082:8080"
    networks:
      - testing-network
    depends_on:
      - frontend
      - database-testing
    env_file:
      - .env.testing

  frontend:
    image: ${DOCKER_USER_PROD}/frontend:latest
    container_name: frontend
    ports:
      - "3000:3000"
    networks: 
      - production-network
      - testing-network


  frontend-testing:
    image: ${DOCKER_USER_TEST}/frontend-testing:latest
    container_name: frontend-testing
    ports:
      - "3001:3000"
    networks:
      - testing-network
      - production-network

  database:
    image: postgres:latest
    container_name: database-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    networks: 
      - production-network
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db:/docker-entrypoint-initdb.d
  

  database-testing:
    image: postgres:latest
    container_name: database-testing
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5433:5432"
    networks:
      - testing-network
    volumes:
      - postgres_data_testing:/var/lib/postgresql/data
      - ./db:/docker-entrypoint-initdb.d

  # Monitoring
  grafana:
    image: grafana/grafana-oss
    container_name: grafana
    ports:
      - "9999:9999"
    env_file:
      - .env.monitoring
    volumes:
      - ./monitoring/grafana/grafana.ini:/etc/grafana/grafana.ini
      - grafana-storage:/var/lib/grafana
    depends_on:
      - prometheus
      - loki
    networks:
      - monitoring-network
    restart: unless-stopped 

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - monitoring-network
    restart: unless-stopped

  loki:
    image: grafana/loki:3.4.1
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/mnt/config/loki-config.yaml
    volumes:
      - ./monitoring:/mnt/config
    networks:
      - monitoring-network
    restart: unless-stopped

  promtail:
    image: grafana/promtail:3.4.1
    container_name: promtail
    volumes:
      - ./monitoring:/mnt/config
      - /var/log:/var/log
    command: -config.file=/mnt/config/promtail-config.yaml
    depends_on:
      - loki
    networks:
      - monitoring-network
    restart: unless-stopped

networks:
  production-network:
    driver: bridge
  monitoring-network:
    driver: bridge
  testing-network:
    driver: bridge

volumes:
  postgres_data:
  postgres_data_testing:
  grafana-storage:
  prometheus-data:
